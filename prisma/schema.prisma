// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id              String           @id    @default(uuid())
  clerkUserId     String           @unique
  username        String           @unique
  email           String           @unique
  name            String?  
  imageUrl        String?
  events          Event[]         @relation("userEvents")
  bookings        Booking[]       @relation("userBookings")
  availability    Availability?   
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}


model Event{
  id              String      @id    @default(uuid())
  title           String
  description     String?
  duration        Int
  isPrivate       Boolean     @default(true)
  bookings        Booking[]   

  userId          String
  user            User        @relation("userEvents",fields: [userId], references: [id],onDelete: Cascade)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt 
}


model Booking{
  id              String      @id    @default(uuid())
  name            String
  email           String
  additionalInfo  String?
  startTime       DateTime
  endTime         DateTime
  meetLink        String  
  googleEventId   String

  userId          String
  user            User        @relation("userBookings",fields: [userId],references: [id])
  eventId         String
  event           Event       @relation(fields: [eventId], references: [id],onDelete:Cascade)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}


model Availability{
  id              String      @id    @default(uuid())
  days            Day[]
  timeGap         Int

  userId          String      @unique
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}


model Day{
  id              String        @id    @default(uuid())
  day             DaysOfWeek
  startTime       DateTime
  endTime         DateTime

  availabilityId  String
  availability    Availability  @relation(fields: [availabilityId],references: [id], onDelete: Cascade)
}

enum DaysOfWeek{
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}